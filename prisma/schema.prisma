datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String? 
  accounts      Account[]
  sessions      Session[]
  role String @default("STUDENT")
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  consultations Consultation[]

  professor     Professor?      @relation

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Consultation{
  id String @id @default(cuid())
  userId String
  professorId String
  date DateTime
  time String
  consultationType String
  subjectAndSection String
  status String @default("Pending") // Approved, Pending, Cancelled
  locationOrLink String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  professor Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Professor {
  id           String          @id @default(cuid())
  name         String?
  schedule     Json @default("{}")
  userId      String    @unique   // Ensure unique userId here

  consultations Consultation[]

  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}
